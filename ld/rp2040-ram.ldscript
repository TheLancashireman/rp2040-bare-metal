/*  Memory layout:
 *
 *  The RP2040 has 256 KiB RAM located at 0x20000000. The RAM is arranged in four banks, and the
 *	image at this address is "striped" (i.e. address xx0 is in bank 0, address xx4 is in bank 1,
 *	address xx8 is in bank 2 and address xxc is in bank 3.
 *
 *	In the initial examples we'll use the boot loader to load the program directly into RAM. This means
 *	need an entry point at the start that initializes the stack pointer
 *
 *  (c) David Haworth
 *
 *  This file is part of rp2040-bare-metal.
 *
 *  rp2040-bare-metal is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  rp2040-bare-metal is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with rp2040-bare-metal.  If not, see <http://www.gnu.org/licenses/>.
*/

MEMORY
{
	ram		(rw)	: org = 0x20000000, len = 0x40000	/* 256 KiB */
}

SECTIONS
{
    .text	:
	{
		build/rp2040-boot.o(.text*)
		*(.text*)
	} > ram

	.rodata	BLOCK(256) :
	{
		build/rp2040-vectors.o(.rodata*)
		*(.rodata*)
	} > ram

	.data	BLOCK(256) :
	{
		start_data = .;
		*(.data*)
		FILL(0x00)
		. = ALIGN(16);
		end_data = .;
	} > ram

    .bss	BLOCK(16) (NOLOAD) :
	{
		start_bss = .;
		*(.bss*)
		end_bss = .;
	} > ram

/* Main stack at the top of memory, 2 KiB.
 * Process stack just underneath, 4 KiB.
*/
rp2040_stacktop = (0x20000000 + 0x40000);
rp2040_pstacktop = (rp2040_stacktop - 2048);

/* Core1 stacks just under core0 stacks. Same sizes.
*/
rp2040_stacktop1 = (rp2040_pstacktop - 4096);
rp2040_pstacktop1 = (rp2040_stacktop1  - 2048);

/* elf2uf2 complains if the entry address is even. This is a workaround.
 * Use rp2040_entry instead of rp2040_boot with the -e option to the linker.
*/
rp2040_entry = rp2040_boot | 0x1;
rp2040_entry1 = rp2040_boot1 | 0x1;

  /* These sections appear to be generated by the compiler.
   * We doesn't use them.
  */
    .stack              : { *(.stack)       }

  /* The remainder are DWARF-2 debug sections. They contain
   * ELF relocations and must be located at zero.
  */
    . = 0x0;
    .debug_aranges      : { *(.debug_aranges)   }
    . = 0x0;
    .debug_pubnames     : { *(.debug_pubnames)  }
    . = 0x0;
    .debug_info         : { *(.debug_info)  }
    . = 0x0;
    .debug_abbrev       : { *(.debug_abbrev)    }
    . = 0x0;
    .debug_line         : { *(.debug_line)  }
}
